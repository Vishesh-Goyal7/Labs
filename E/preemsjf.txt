#include <stdio.h>
#include <limits.h>

#define MAX_PROCESSES 100

typedef struct {
    int id;
    int arrival;
    int burst;
    int remaining;
    int completion;
    int turnaround;
    int waiting;
    int finished;
} Process;

void calculateTimes(Process proc[], int n) {
    int current_time = 0, completed = 0;
    int min_remaining, min_index;

    while (completed < n) {
        min_remaining = INT_MAX;
        min_index = -1;

        for (int i = 0; i < n; i++) {
            if (proc[i].arrival <= current_time && !proc[i].finished && proc[i].remaining < min_remaining) {
                min_remaining = proc[i].remaining;
                min_index = i;
            }
        }

        if (min_index == -1) {
            current_time++;
        } else {
            current_time++;
            proc[min_index].remaining--;

            if (proc[min_index].remaining == 0) {
                proc[min_index].completion = current_time;
                proc[min_index].turnaround = proc[min_index].completion - proc[min_index].arrival;
                proc[min_index].waiting = proc[min_index].turnaround - proc[min_index].burst;
                proc[min_index].finished = 1;
                completed++;
            }
        }
    }
}

int main() {
    Process proc[MAX_PROCESSES];
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Enter arrival time and burst time for Process %d: ", proc[i].id);
        scanf("%d %d", &proc[i].arrival, &proc[i].burst);
        proc[i].remaining = proc[i].burst;
        proc[i].finished = 0;
    }

    calculateTimes(proc, n);

    float total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting;
    }
    float average_waiting_time = total_waiting_time / n;

    printf("\nProcess ID | Arrival Time | Burst Time | Completion Time | Turnaround Time | Waiting Time\n");
    for (int i = 0; i < n; i++) {
        printf(" %d\t   | %d\t\t | %d\t\t | %d\t\t   | %d\t\t   | %d\n",
            proc[i].id, proc[i].arrival, proc[i].burst, proc[i].completion, proc[i].turnaround, proc[i].waiting);
    }

    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);

    return 0;
}
