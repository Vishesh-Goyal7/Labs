#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t rw_mutex;
sem_t mutex;
int read_count = 0;
int shared_data = 0;

void* reader(void* arg) {
    int reader_id = *(int*)arg;

    sem_wait(&mutex);
    read_count++;
    if (read_count == 1) {
        sem_wait(&rw_mutex);
    }
    sem_post(&mutex);

    printf("Reader %d is reading the shared data: %d\n", reader_id, shared_data);
    sleep(1);


    sem_wait(&mutex);
    read_count--;
    if (read_count == 0) {
        sem_post(&rw_mutex);
    }
    sem_post(&mutex);

    pthread_exit(0);
}

void* writer(void* arg) {
    int writer_id = *(int*)arg;

    sem_wait(&rw_mutex);

    shared_data++;
    printf("Writer %d has modified the shared data to: %d\n", writer_id, shared_data);
    sleep(1);

    sem_post(&rw_mutex);
    pthread_exit(0);
}

int main() {
    pthread_t readers[5], writers[3];
    int reader_ids[5] = {1, 2, 3, 4, 5};
    int writer_ids[3] = {1, 2, 3};

    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);
    for (int i = 0; i < 3; i++) {
        pthread_create(&writers[i], NULL, writer, (void*)&writer_ids[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_create(&readers[i], NULL, reader, (void*)&reader_ids[i]);
    }


    for (int i = 0; i < 3; i++) {
        pthread_join(writers[i], NULL);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
    }



    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);

    return 0;
}
