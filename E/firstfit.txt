#include <stdio.h>
#include <stdlib.h>

#define MAX_HOLES 10
#define MAX_PROCESSES 10

struct Hole {
    int size;
    int remaining;
    int allocated;
};

struct Process {
    int size;
    int allocated;
};

void displayAllocation(struct Process processes[], int np, struct Hole holes[], int nh) {
    printf("\nProcess Allocation Status:\n");
    for (int i = 0; i < np; i++) {
        if (processes[i].allocated) {
            printf("Process %d (Size: %d) - Allocated\n", i + 1, processes[i].size);
        } else {
            printf("Process %d (Size: %d) - Unallocated\n", i + 1, processes[i].size);
        }
    }

    printf("\nHoles Status:\n");
    for (int i = 0; i < nh; i++) {
        printf("Hole %d (Size: %d) - Remaining: %d\n", i + 1, holes[i].size, holes[i].remaining);
    }
}


void firstFit(struct Hole holes[], int nh, struct Process processes[], int np) {
    for (int i = 0; i < np; i++) {
        processes[i].allocated = 0;
        for (int j = 0; j < nh; j++) {
            if (holes[j].remaining >= processes[i].size) {
                holes[j].remaining -= processes[i].size;
                processes[i].allocated = 1;
                printf("First Fit: Process %d allocated to Hole %d\n", i + 1, j + 1);
                break;
            }
        }
    }
}


void bestFit(struct Hole holes[], int nh, struct Process processes[], int np) {

    for (int i = 0; i < nh - 1; i++) {
        for (int j = i + 1; j < nh; j++) {
            if (holes[i].size > holes[j].size) {
                struct Hole temp = holes[i];
                holes[i] = holes[j];
                holes[j] = temp;
            }
        }
    }

    for (int i = 0; i < np; i++) {
        processes[i].allocated = 0;
        int bestIndex = -1;
        for (int j = 0; j < nh; j++) {
            if (holes[j].remaining >= processes[i].size) {
                if (bestIndex == -1 || holes[j].remaining < holes[bestIndex].remaining) {
                    bestIndex = j;
                }
            }
        }
        if (bestIndex != -1) {
            holes[bestIndex].remaining -= processes[i].size;
            processes[i].allocated =  1;
            printf("Best Fit: Process %d allocated to Hole %d\n", i + 1, bestIndex + 1);
        }
    }

int main() {
    struct Hole holes[MAX_HOLES];
    struct Process processes[MAX_PROCESSES];
    int nh, np;


    printf("Enter number of holes: ");
    scanf("%d", &nh);

    for (int i = 0; i < nh; i++) {
        printf("Enter size of hole %d: ", i + 1);
        scanf("%d", &holes[i].size);
        holes[i].remaining = holes[i].size;
        holes[i].allocated = 0;
    }


    printf("Enter number of processes: ");
    scanf("%d", &np);

    for (int i = 0; i < np; i++) {
        printf("Enter memory requirement for process %d: ", i + 1);
        scanf("%d", &processes[i].size);
        processes[i].allocated = 0;
    }

    firstFit(holes, nh, processes, np);
    displayAllocation(processes, np, holes, nh);

    for (int i = 0; i < nh; i++) {
        holes[i].remaining = holes[i].size;
    }

    bestFit(holes, nh, processes, np);
    displayAllocation(processes, np, holes, nh);

    return 0;
}


