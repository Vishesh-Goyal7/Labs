#include <stdio.h>
#define MAX_PROCESSES 100

typedef struct {
    int id;           // Process ID
    int arrival;      // Arrival time
    int burst;        // Burst time
    int completion;   // Completion time
    int turnaround;   // Turnaround time
    int waiting;      // Waiting time
} Process;

void calculateTimes(Process proc[], int n) {
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        if (current_time < proc[i].arrival) {
            current_time = proc[i].arrival;
        }

        proc[i].completion = current_time + proc[i].burst;

        current_time = proc[i].completion;

        proc[i].turnaround = proc[i].completion - proc[i].arrival;

        proc[i].waiting = proc[i].turnaround - proc[i].burst;
    }
}

void sortProcesses(Process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (proc[i].arrival > proc[j].arrival ||
               (proc[i].arrival == proc[j].arrival && proc[i].burst > proc[j].burst)) {
                Process temp = proc[i];
                proc[i] = proc[j];
                proc[j] = temp;
            }
        }
    }
}

int main() {
    Process proc[MAX_PROCESSES];
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Enter arrival time and burst time for Process %d: ", proc[i].id);
        scanf("%d %d", &proc[i].arrival, &proc[i].burst);
    }

    sortProcesses(proc, n);


    calculateTimes(proc, n);

    float total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting;
    }
    float average_waiting_time = total_waiting_time / n;

    printf("\nProcess ID | Arrival Time | Burst Time | Completion Time | Turnaround Time | Waiting Time\n");
    for (int i = 0; i < n; i++) {
        printf(" %d\t   | %d\t\t | %d\t\t | %d\t\t   | %d\t\t   | %d\n",
            proc[i].id, proc[i].arrival, proc[i].burst, proc[i].completion, proc[i].turnaround, proc[i].waiting);
    }

    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);

    return 0;
}
