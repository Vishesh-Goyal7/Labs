#include <stdio.h>
#include <cuda_runtime.h>

#define N 5

__device__ int toOctal(int num) {
    int octalNum = 0, placeValue = 1;

    while (num > 0) {
        int remainder = num % 8;
        octalNum += remainder * placeValue;
        num /= 8;
        placeValue *= 10;
    }
    return octalNum;
}

__global__ void convertToOctal(int *A, int *B, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        B[i] = toOctal(A[i]);
    }
}

int main() {
    int A[N] = {10, 25, 45, 64, 128};
    int B[N];

    int *d_A, *d_B;
    cudaMalloc(&d_A, N * sizeof(int));
    cudaMalloc(&d_B, N * sizeof(int));

    cudaMemcpy(d_A, A, N * sizeof(int), cudaMemcpyHostToDevice);

    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;

    convertToOctal<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, N);

    cudaMemcpy(B, d_B, N * sizeof(int), cudaMemcpyDeviceToHost);

    printf("Octal Values:\n");
    for (int i = 0; i < N; i++) {
        printf("%d -> %d\n", A[i], B[i]);
    }

    cudaFree(d_A);
    cudaFree(d_B);
    return 0;
}
