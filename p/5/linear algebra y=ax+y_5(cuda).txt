#include <stdio.h>
#include <cuda_runtime.h>

__global__ void saxpy(float *x, float *y, float alpha, int N) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < N) {
        y[i] = alpha * x[i] + y[i];
    }
}

int main() {
    int N = 5;
    float x[N], y[N], alpha = 2.0;
    float *d_x, *d_y;

    // Initializing x and y vectors
    for (int i = 0; i < N; i++) {
        x[i] = i * 1.0f;
        y[i] = i * 0.5f;
    }

    cudaMalloc(&d_x, N * sizeof(float));
    cudaMalloc(&d_y, N * sizeof(float));

    cudaMemcpy(d_x, x, N * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_y, y, N * sizeof(float), cudaMemcpyHostToDevice);

    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;

    saxpy<<<blocksPerGrid, threadsPerBlock>>>(d_x, d_y, alpha, N);

    cudaMemcpy(y, d_y, N * sizeof(float), cudaMemcpyDeviceToHost);

    printf("Result:\n");
    for (int i = 0; i < N; i++) {
        printf("%.2f ", y[i]);
    }

    cudaFree(d_x);
    cudaFree(d_y);
    return 0;
}
