#include <stdio.h>
#include <cuda_runtime.h>

__global__ void oddEvenSort(int *arr, int N, int phase) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int idx = 2 * i + phase;
    
    if (idx < N - 1) {
        if (arr[idx] > arr[idx + 1]) {
            // Swap arr[idx] and arr[idx + 1]
            int temp = arr[idx];
            arr[idx] = arr[idx + 1];
            arr[idx + 1] = temp;
        }
    }
}

int main() {
    int N = 6;
    int arr[] = {9, 3, 5, 1, 6, 8};
    int *d_arr;

    cudaMalloc(&d_arr, N * sizeof(int));
    cudaMemcpy(d_arr, arr, N * sizeof(int), cudaMemcpyHostToDevice);

    int threadsPerBlock = 256;
    int blocksPerGrid = (N / 2 + threadsPerBlock - 1) / threadsPerBlock;

    for (int phase = 0; phase < N; phase++) {
        oddEvenSort<<<blocksPerGrid, threadsPerBlock>>>(d_arr, N, phase % 2);
    }

    cudaMemcpy(arr, d_arr, N * sizeof(int), cudaMemcpyDeviceToHost);

    printf("Sorted Array:\n");
    for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
    }

    cudaFree(d_arr);
    return 0;
}
