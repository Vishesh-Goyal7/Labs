#include <stdio.h>
#include <cuda_runtime.h>
#include <math.h>

__global__ void computeSine(float *angles, float *results, int N) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < N) {
        results[i] = sinf(angles[i]);
    }
}

int main() {
    int N = 5;
    float angles[N], results[N];
    float *d_angles, *d_results;

    // Initializing angles in radians
    for (int i = 0; i < N; i++) {
        angles[i] = (float)i * 3.14 / 4;  // Example: 0, π/4, π/2, 3π/4, π
    }

    cudaMalloc(&d_angles, N * sizeof(float));
    cudaMalloc(&d_results, N * sizeof(float));

    cudaMemcpy(d_angles, angles, N * sizeof(float), cudaMemcpyHostToDevice);

    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;

    computeSine<<<blocksPerGrid, threadsPerBlock>>>(d_angles, d_results, N);

    cudaMemcpy(results, d_results, N * sizeof(float), cudaMemcpyDeviceToHost);

    printf("Sine of Angles:\n");
    for (int i = 0; i < N; i++) {
        printf("sin(%.2f) = %.4f\n", angles[i], results[i]);
    }

    cudaFree(d_angles);
    cudaFree(d_results);
    return 0;
}
