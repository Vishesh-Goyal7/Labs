#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>


void ErrorHandler(int err_code) {
   if (err_code != MPI_SUCCESS) {
       char error_string[BUFSIZ];
       int length_err_string, err_class;
       MPI_Error_class(err_code, &err_class);
       MPI_Error_string(err_code, error_string, NULL);
       printf("Error: %d %s\n", err_class, error_string);
   }
}


int main(int argc, char* argv[]) {
   int rank, size, err_code;
   int arr[16], result[16];
   int local_data[4], local_prefix_sum[4];


   MPI_Init(&argc, &argv);
   MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);
  
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);
   MPI_Comm_size(MPI_COMM_WORLD, &size);


   if (size != 4) {
       if (rank == 0)
           printf("This program requires exactly 4 MPI processes.\n");
       MPI_Finalize();
       return 1;
   }
   if (rank == 0) {
       printf("Enter 16 elements:\n");
       for (int i = 0; i < 16; i++)
           scanf("%d", &arr[i]);
   }


   MPI_Scatter(arr, 4, MPI_INT, local_data, 4, MPI_INT, 0, MPI_COMM_WORLD);
   for (int j = 0; j < 4; j++) {
       MPI_Scan(&local_data[j], &local_prefix_sum[j], 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
   }
   MPI_Gather(local_prefix_sum, 4, MPI_INT, result, 4, MPI_INT, 0, MPI_COMM_WORLD);
   if (rank == 0) {
       printf("Final Result:\n");
       for (int i = 0; i < 16; i++) {
           printf("%d ", result[i]);
           if ((i + 1) % 4 == 0) printf("\n");
       }
   }


   MPI_Finalize();
   return 0;
}
