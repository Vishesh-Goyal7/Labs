#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>


void ErrorHandler(int err_code) {
   if (err_code != MPI_SUCCESS) {
       char error_string[BUFSIZ];
       int length_err_string, err_class;
       MPI_Error_class(err_code, &err_class);
       MPI_Error_string(err_code, error_string, &length_err_string);
       printf("Error: %d %s\n", err_class, error_string);
   }
}


int main(int argc, char* argv[]) {
   int rank, size, err_code, ele, result;
   int mat[3][3], flatMat[9];  // Use a 1D array for proper MPI_Scatter
   int sMat[3]; // Each process receives one row


   MPI_Init(&argc, &argv);
   MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);
  
   err_code = MPI_Comm_rank(MPI_COMM_WORLD, &rank);
   ErrorHandler(err_code);
  
   err_code = MPI_Comm_size(MPI_COMM_WORLD, &size);
   ErrorHandler(err_code);


   if (size != 3) {  // Ensure the program runs only with 3 processes
       if (rank == 0)
           printf("This program requires exactly 3 MPI processes.\n");
       MPI_Finalize();
       return 1;
   }


   if (rank == 0) {
       printf("Enter the elements in 3x3 matrix:\n");
       for (int i = 0; i < 3; i++) {
           for (int j = 0; j < 3; j++) {
               scanf("%d", &mat[i][j]);
               flatMat[i * 3 + j] = mat[i][j]; // Convert to 1D array
           }
       }
       printf("Enter element to be searched: ");
       scanf("%d", &ele);
   }


   err_code = MPI_Bcast(&ele, 1, MPI_INT, 0, MPI_COMM_WORLD);
   ErrorHandler(err_code);


   err_code = MPI_Scatter(flatMat, 3, MPI_INT, sMat, 3, MPI_INT, 0, MPI_COMM_WORLD);
   ErrorHandler(err_code);


   int local_count = 0;
   for (int i = 0; i < 3; i++) {
       if (sMat[i] == ele)
           local_count++;
   }


      err_code = MPI_Reduce(&local_count, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
   ErrorHandler(err_code);


   if (rank == 0) {
       printf("Total number of occurrences: %d\n", result);
   }


   MPI_Finalize();
   return 0;
}
