#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void ErrorHandler(int err_code) {
   if (err_code != MPI_SUCCESS) {
       char error_string[BUFSIZ];
       int length_err_string, err_class;
       MPI_Error_class(err_code, &err_class);
       MPI_Error_string(err_code, error_string, &length_err_string);
       printf("Error: %d %s\n", err_class, error_string);
   }
}


int main(int argc, char* argv[]) {
   int rank, size, err_code;
   char word[100], recv_char;
  
   MPI_Init(&argc, &argv);
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);
   MPI_Comm_size(MPI_COMM_WORLD, &size);
  
   if (rank == 0) {
       printf("Enter a word of length %d: ", size);
       scanf("%s", word);
       if (strlen(word) != size) {
           printf("Error: Word length must be %d\n", size);
           MPI_Abort(MPI_COMM_WORLD, 1);
       }
   }


   
   err_code = MPI_Scatter(word, 1, MPI_CHAR, &recv_char, 1, MPI_CHAR, 0, MPI_COMM_WORLD);
   ErrorHandler(err_code);


   
   char local_output[size + 1]; // +1 for null terminator
   for (int i = 0; i <= rank; i++) {
       local_output[i] = recv_char;
   }
   local_output[rank + 1] = '\0';  // Null-terminate


   
   char final_output[size * size];  // Maximum possible size
   err_code = MPI_Gather(local_output, size, MPI_CHAR, final_output, size, MPI_CHAR, 0, MPI_COMM_WORLD);
   ErrorHandler(err_code);


   
   if (rank == 0) {
       printf("Output: ");
       for (int i = 0; i < size; i++) {
           printf("%s", &final_output[i * size]);
       }
       printf("\n");
   }


   MPI_Finalize();
   return 0;
}
