#include <stdio.h>
#include <cuda_runtime.h>


#define INPUT_LEN 5
#define OUTPUT_LEN 10


__global__ void transformString(char *d_S, char *d_RS) {
    int tid = threadIdx.x + blockIdx.x * blockDim.x;


    int copy_indices[OUTPUT_LEN] = {0, 1, 2, 3, 0, 1, 2, 3, 1, 0};


    if (tid < OUTPUT_LEN) {
        d_RS[tid] = d_S[copy_indices[tid]];
    }
}


int main() {
    char h_S[INPUT_LEN] = "PCAP";
    char h_RS[OUTPUT_LEN] = {0};


    char *d_S, *d_RS;
   
    cudaMalloc((void **)&d_S, INPUT_LEN * sizeof(char));
    cudaMalloc((void **)&d_RS, OUTPUT_LEN * sizeof(char));


    cudaMemcpy(d_S, h_S, INPUT_LEN * sizeof(char), cudaMemcpyHostToDevice);


    transformString<<<1, OUTPUT_LEN>>>(d_S, d_RS);
    cudaDeviceSynchronize();


    cudaMemcpy(h_RS, d_RS, OUTPUT_LEN * sizeof(char), cudaMemcpyDeviceToHost);


    printf("Output string RS: %s\n", h_RS);


    cudaFree(d_S);
    cudaFree(d_RS);


    return 0;
}
